
// Numbers refer to the XPath 3.1 grammar
// 1
Xpath = { SOI ~ Expr ~ EOI }
// 2
ParamList = _{ Param ~ ("," ~ Param)* }
// 3
Param = { "$" ~ EQName ~ TypeDeclaration? }
// 4
FunctionBody = _{ EnclosedExpr }
// 5
EnclosedExpr = { "{" ~ Expr? ~ "}" }
// 6
Expr = { ExprSingle ~ ("," ~ ExprSingle)* }
// 7
ExprSingle = { ForExpr | LetExpr | QuantifiedExpr | IfExpr | OrExpr }
// 8
ForExpr = { SimpleForClause ~ "return" ~ ExprSingle }
// 9
SimpleForClause = { "for" ~ SimpleForBinding ~ ("," ~ SimpleForBinding)* }
// 10
SimpleForBinding = { "$" ~ VarName ~ "in" ~ ExprSingle }
// 11
LetExpr = { SimpleLetClause ~ "return" ~ ExprSingle }
// 12
SimpleLetClause = { "let" ~ SimpleLetBinding ~ ("," ~ SimpleLetBinding)* }
// 13
SimpleLetBinding = { "$" ~ VarName ~ ":=" ~ ExprSingle }
//14
QuantifiedExpr = {
  SomeOrEvery ~ SimpleForBinding ~ ("," ~ SimpleForBinding)* ~ "satisfies" ~ ExprSingle
}
SomeOrEvery = { "some" | "every" }
// 15
IfExpr = { "if" ~ "(" ~ Expr ~ ")" ~ "then" ~ ExprSingle ~ "else" ~ ExprSingle }
// 16
OrExpr = { AndExpr ~ ( "or" ~ AndExpr )* }
// 17
AndExpr = { ComparisonExpr ~ ( "and" ~ ComparisonExpr )* }
// 18
ComparisonExpr = { StringConcatExpr ~ ( (ValueComp
                                       | NodeComp
                                       | GeneralComp) ~ StringConcatExpr )? }
// 19
StringConcatExpr = { RangeExpr ~ ( "||" ~ RangeExpr )* }
// 20
RangeExpr = { AdditiveExpr ~ ( "to" ~ AdditiveExpr )? }
// 21
AdditiveExpr = { MultiplicativeExpr ~ AdditiveExpr1* }
AdditiveExpr1 = { AdditiveOp ~ MultiplicativeExpr }
AdditiveOp = { "+" | "-" }
// 22
MultiplicativeExpr = { UnionExpr ~ MultiplicativeExpr1* }
MultiplicativeExpr1 = { MultiplicativeOp ~ UnionExpr }
MultiplicativeOp = { "*" | "div" | "idiv" | "mod" }
// 23
UnionExpr = { IntersectExceptExpr ~ ( ("union" | "|") ~ IntersectExceptExpr )* }
// 24
IntersectExceptExpr = { InstanceofExpr ~ ( ("intersect" | "except") ~ InstanceofExpr )* }
// 25
InstanceofExpr = { TreatExpr ~ ( "instance" ~ "of" ~ SequenceType )? }
// 26
TreatExpr = { CastableExpr ~ ( "treat" ~ "as" ~ SequenceType )? }
// 27
CastableExpr = { CastExpr ~ ( "castable" ~ "as" ~ SingleType )? }
// 28
CastExpr = { ArrowExpr ~ ( "cast" ~ "as" ~ SingleType )? }
// 29
ArrowExpr = { UnaryExpr ~ ( "=>" ~ ArrowFunctionSpecifier )* }
// 30
UnaryExpr = { AdditiveOp* ~ ValueExpr }
// 31
ValueExpr = _{ SimpleMapExpr }
// 32
GeneralComp = { "=" | "!=" | "<=" | "<" | ">=" | ">" }
// 33
ValueComp = { "eq" | "ne" | "lt" | "le" | "gt" | "ge" }
// 34
NodeComp = { "is" | "<<" | ">>" }
// 35
SimpleMapExpr = { PathExpr ~ ( "!" ~ PathExpr )* }
// 36
PathExpr = { (InitialSlashSlash ~ RelativePathExpr) | (InitialSlash ~ RelativePathExpr?) | RelativePathExpr }
InitialSlash = { "/" }
InitialSlashSlash = { "//" }
// 37
RelativePathExpr = { StepExpr ~ SlashStep* }
SlashStep = { (SlashSlash | Slash) ~ StepExpr }
Slash = { "/" }
SlashSlash = { "//" }
// 38
StepExpr = { PostfixExpr | AxisStep }
// 39
AxisStep = { (ReverseStep | ForwardStep) ~ PredicateList }
// 40
ForwardStep = { (ForwardAxis ~ ColonColon ~ NodeTest) | AbbrevForwardStep }
// 41
ForwardAxis = { "child" | "descendant-or-self" | "descendant" | "attribute" | "self"  | "following-sibling" | "following" | "namespace" }
ColonColon = _{ "::" }
// 42
AbbrevForwardStep = { AttributeIndicator? ~ NodeTest }
AttributeIndicator = { "@" }
// 43
ReverseStep = { (ReverseAxis ~ ColonColon ~ NodeTest) | AbbrevReverseStep }
// 44
ReverseAxis = { "parent" | "ancestor-or-self" | "ancestor" | "preceding-sibling" | "preceding" }
// 45
AbbrevReverseStep = { ".." }
// 46
NodeTest = { KindTest | Wildcard | EQName }
// 47
// NameTest = { EQName | Wildcard }
// 48
Wildcard = ${ Star
           | (NCName ~ ":" ~ Star)
           | (Star ~ ":" ~ NCName)
           | (BracedURILiteral ~ Star) }
Star = { "*" }
// 49
PostfixExpr = { PrimaryExpr ~ (Predicate | ArgumentList | Lookup)* }
// 50
ArgumentList = { "(" ~ (Argument ~ ("," ~ Argument)*)? ~ ")" }
// 51
PredicateList = { Predicate* }
// 52
Predicate = { "[" ~ Expr ~ "]" }
// 53
Lookup = { "?" ~ KeySpecifier }
// 54
KeySpecifier = { NCName | IntegerLiteral | ParenthesizedExpr | "*" }
// 55
ArrowFunctionSpecifier = { (FunctionCallEQName | VarRef | ParenthesizedExpr) ~ ArgumentList }
// 56
PrimaryExpr = { Literal
              | VarRef
              | ParenthesizedExpr
              | ContextItemExpr
              | FunctionItemExpr
              | MapConstructor
              | ArrayConstructor
              | FunctionCall
              | UnaryLookup }
// 57
Literal = { DoubleLiteral | DecimalLiteral | IntegerLiteral | StringLiteral }
// 59
VarRef = { "$" ~ VarName }
// 60
VarName = _{ EQName }
// 61
ParenthesizedExpr = { "(" ~ Expr? ~ ")" }
// 62
ContextItemExpr = ${ "." ~ !"." }
// 63
FunctionCall = { FunctionCallEQName ~ ArgumentList }
// 64
Argument = _{ ExprSingle | ArgumentPlaceholder }
// 65
ArgumentPlaceholder = { "?" }
// 66
FunctionItemExpr = { NamedFunctionRef | InlineFunctionExpr }
// 67
NamedFunctionRef = { EQName ~ "#" ~ IntegerLiteral }
// 68
InlineFunctionExpr = { "function" ~ "(" ~ ParamListMaybe ~ ")" ~ AsTypeMaybe ~ FunctionBody }
ParamListMaybe = { ParamList? }
AsTypeMaybe = { ("as" ~ SequenceType)? }
// 69
MapConstructor = { "map" ~ "{" ~ (MapConstructorEntry ~ ("," ~ MapConstructorEntry)*)? ~ "}" }
// 70
MapConstructorEntry = { MapKeyExpr ~ ":" ~ MapValueExpr }
// 71
MapKeyExpr = _{ ExprSingle }
// 72
MapValueExpr = _{ ExprSingle }
// 73
ArrayConstructor = { SquareArrayConstructor | CurlyArrayConstructor }
// 74
SquareArrayConstructor = _{ "[" ~ (ExprSingle ~ ("," ~ ExprSingle)*)? ~ "]" }
// 75
CurlyArrayConstructor = _{ "array" ~ EnclosedExpr }
// 76
UnaryLookup = { "?" ~ KeySpecifier }
// 77
SingleType = { SimpleTypeName ~ "?"? }
// 78
TypeDeclaration = _{ "as" ~ SequenceType }
// 79
SequenceType = { EmptySequence | (ItemType ~ OccurrenceIndicator?) }
EmptySequence = { ( "empty-sequence" ~ "(" ~ ")" ) }
// 80
OccurrenceIndicator = { "?" | "*" | "+" }
// 81
ItemType = { KindTest
           | Item
           | FunctionTest
           | MapTest
           | ArrayTest
           | AtomicOrUnionType
           | ParenthesizedItemType }
Item = { ("item" ~ "(" ~ ")") }
// 82
AtomicOrUnionType = { EQName }
// 83
KindTest = { DocumentTest
           | ElementTest
           | AttributeTest
           | SchemaElementTest
           | SchemaAttributeTest
           | PITest
           | CommentTest
           | TextTest
           | NamespaceNodeTest
           | AnyKindTest }
// 84
AnyKindTest = { "node" ~ "(" ~ ")" }
// 85
DocumentTest = { "document-node" ~ "(" ~ (ElementTest | SchemaElementTest)? ~ ")" }
// 86
TextTest = { "text" ~ "(" ~ ")" }
// 87
CommentTest = { "comment" ~ "(" ~ ")" }
// 88
NamespaceNodeTest = { "namespace-node" ~ "(" ~ ")" }
// 89
PITest = { "processing-instruction" ~ "(" ~ (NCName | StringLiteral)? ~ ")" }
// 90
AttributeTest = { "attribute" ~ "(" ~ (AttribNameOrWildcard ~ ("," ~ TypeName)?)? ~ ")" }
// 91
AttribNameOrWildcard = { AttributeName | "*" }
// 92
SchemaAttributeTest = { "schema-attribute" ~ "(" ~ AttributeDeclaration ~ ")" }
// 93
AttributeDeclaration = { AttributeName }
// 94
ElementTest = { "element" ~ "(" ~ (ElementNameOrWildcard ~ ("," ~ TypeName ~ "?"?)?)? ~ ")" }
// 95
ElementNameOrWildcard = { ElementName | "*" }
// 96
SchemaElementTest = { "schema-element" ~ "(" ~ ElementDeclaration ~ ")" }
// 97
ElementDeclaration = { ElementName }
// 98
AttributeName = { EQName }
// 99
ElementName = { EQName }
// 100
SimpleTypeName = { TypeName }
// 101
TypeName = { EQName }
// 102
FunctionTest = { AnyFunctionTest | TypedFunctionTest }
// 103
AnyFunctionTest = { "function" ~ "(" ~ "*" ~ ")" }
// 104
TypedFunctionTest = { "function" ~ "(" ~ (SequenceType ~ ("," ~ SequenceType)*)? ~ ")" ~ "as" ~ SequenceType }
// 105
MapTest = { AnyMapTest | TypedMapTest }
// 106
AnyMapTest = { "map" ~ "(" ~ "*" ~ ")" }
// 107
TypedMapTest = {"map" ~ "(" ~ AtomicOrUnionType ~ "," ~ SequenceType ~ ")" }
// 108
ArrayTest = { AnyArrayTest | TypedArrayTest }
// 109
AnyArrayTest = { "array" ~ "(" ~ "*" ~ ")" }
// 110
TypedArrayTest = { "array" ~ "(" ~ SequenceType ~ ")" }
// 111
ParenthesizedItemType = { "(" ~ ItemType ~ ")" }
// 112
EQName = { URIQualifiedName | QName }
FunctionCallEQName = { URIQualifiedName | FunctionCallQName }
// 113
IntegerLiteral = @{ Digits }
// 114
DecimalLiteral = @{ ("." ~ Digits ) | (Digits ~ "." ~ ASCII_DIGIT*) }
// 115
DoubleLiteral = @{ (("." ~ Digits) | (Digits ~ ("." ~ ASCII_DIGIT*)?)) ~ ^"e" ~ ("+"|"-")? ~ Digits }
// 116
StringLiteral = @{ (Quot ~ (EscapeQuot | !Quot ~ ANY)* ~ Quot) | (Apos ~ (EscapeApos | !Apos ~ ANY)* ~ Apos) }
// 117
URIQualifiedName = ${ BracedURILiteral ~ NCName }
// 118
BracedURILiteral = _{ "Q" ~ "{" ~ BracedURILiteralContent ~ "}" }
BracedURILiteralContent = @{ (!("{"|"}") ~ ANY)* }
// 119
EscapeQuot = { "\"\"" }
Quot = { "\"" }
// 120
EscapeApos = { "''" }
Apos = { "'" }
// 121
COMMENT = _{ "(:" ~ (CommentContents | COMMENT)* ~ ":)" }
// 122
QName = { PrefixedName | UnprefixedName }
FunctionCallQName = { PrefixedName | FunctionCallUnprefixedName }
// 123
NCName = @{ NameStartChar ~ NameChar* }
// 125
Digits = @{ ASCII_DIGIT+ }
// 126
CommentContents = { ( !("(:" | ":)") ~ ANY)+ }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }

ReservedFunctionNames = {
    "array"
    | "attribute"
    | "comment"
    | "document-node"
    | "element"
    | "empty-sequence"
    | "function"
    | "if"
    | "item"
    | "map"
    | "namespace-node"
    | "node"
    | "processing-instruction"
    | "schema-attribute"
    | "schema-element"
    | "switch"
    | "text"
    | "typeswitch"
}

// Numbers refer to the grammar in REC-xml-names
// 8
PrefixedName = { Prefix ~ ":" ~ LocalPart }
// 9
UnprefixedName = @{ LocalPart }
FunctionCallUnprefixedName = @{ !ReservedFunctionNames ~ LocalPart }
// 10
Prefix = @{ NCName }
// 11
LocalPart = @{ NCName }

// Numbers refer to the grammar in REC-xml
// 4 (modified to disallow ":")
NameStartChar = @{ 'A'..'Z' | "_" | 'a'..'z' | '\u{C0}'..'\u{D6}' | '\u{D8}'..'\u{F6}' | '\u{F8}'..'\u{2FF}' |
                  '\u{370}'..'\u{37D}' | '\u{37F}'..'\u{1FFF}' | '\u{200C}'..'\u{200D}' | '\u{2070}'..'\u{218F}' |
                  '\u{2C00}'..'\u{2FEF}' | '\u{3001}'..'\u{D7FF}' | '\u{F900}'..'\u{FDCF}' | '\u{FDF0}'..'\u{FFFD}' |
                  '\u{10000}'..'\u{EFFFF}' }
// 4a
NameChar = @{ NameStartChar | "-" | "." | '0'..'9' | '\u{b7}'..'\u{b7}' | '\u{300}'..'\u{36f}' |
                              '\u{203f}'..'\u{2040}' }
